En JavaScript, existen varias formas de crear bucles para iterar sobre colecciones de datos o realizar operaciones repetitivas. Aquí tienes todas las maneras comunes y algunos casos menos conocidos:
1. for

El bucle clásico, se usa cuando conoces el número de iteraciones de antemano.

for (let i = 0; i < 10; i++) {
    console.log(i);
}

2. while

Repite un bloque mientras la condición sea verdadera.

let i = 0;
while (i < 10) {
    console.log(i);
    i++;
}

3. do...while

Similar a while, pero garantiza que el bloque se ejecute al menos una vez.

let i = 0;
do {
    console.log(i);
    i++;
} while (i < 10);

4. for...in

Recorre las propiedades enumerables de un objeto (también funciona en arrays, aunque no es recomendado).

const obj = { a: 1, b: 2, c: 3 };
for (let key in obj) {
    console.log(key, obj[key]);
}

5. for...of

Itera sobre objetos iterables como arrays, strings, mapas, etc.

const arr = [10, 20, 30];
for (let value of arr) {
    console.log(value);
}

6. Array.prototype.forEach

Método específico para iterar sobre arrays.

const arr = [1, 2, 3];
arr.forEach((value, index) => {
    console.log(value, index);
});

7. map

Crea un nuevo array transformando los elementos del array original.

const arr = [1, 2, 3];
const newArr = arr.map(value => value * 2);
console.log(newArr);

8. filter

Crea un nuevo array con los elementos que cumplan una condición.

const arr = [1, 2, 3, 4];
const filteredArr = arr.filter(value => value > 2);
console.log(filteredArr);

9. reduce

Reduce un array a un único valor ejecutando una función acumulativa.

const arr = [1, 2, 3, 4];
const sum = arr.reduce((acc, value) => acc + value, 0);
console.log(sum);

10. every

Itera mientras todos los elementos cumplan una condición.

const arr = [2, 4, 6];
const allEven = arr.every(value => value % 2 === 0);
console.log(allEven);

11. some

Itera hasta que algún elemento cumpla una condición.

const arr = [1, 3, 5];
const hasEven = arr.some(value => value % 2 === 0);
console.log(hasEven);

12. entries con for...of

Itera sobre un array con índices y valores.

const arr = ['a', 'b', 'c'];
for (let [index, value] of arr.entries()) {
    console.log(index, value);
}

13. Object.keys, Object.values, Object.entries

Recorre objetos con arrays generados de sus claves, valores o pares clave-valor.

const obj = { a: 1, b: 2, c: 3 };

// Con claves
Object.keys(obj).forEach(key => console.log(key, obj[key]));

// Con valores
Object.values(obj).forEach(value => console.log(value));

// Con entradas
Object.entries(obj).forEach(([key, value]) => console.log(key, value));

14. Recursión

Utiliza funciones recursivas como un "bucle implícito".

function recursiveLoop(n) {
    if (n <= 0) return;
    console.log(n);
    recursiveLoop(n - 1);
}
recursiveLoop(5);

15. setInterval y setTimeout (controlando bucles temporales)

Repetir operaciones con un tiempo definido.

let count = 0;
const interval = setInterval(() => {
    console.log(count);
    count++;
    if (count === 5) clearInterval(interval);
}, 1000);

16. generator con yield

Crear iteradores personalizados.

function* generatorLoop() {
    yield 1;
    yield 2;
    yield 3;
}

for (let value of generatorLoop()) {
    console.log(value);
}

17. break y continue

Controlan el flujo dentro de bucles.

for (let i = 0; i < 10; i++) {
    if (i === 5) break;    // Termina el bucle
    if (i % 2 === 0) continue; // Salta a la siguiente iteración
    console.log(i);
}

18. flatMap

Combina mapeo y aplanado de arrays.

const arr = [[1], [2, 3], [4]];
const flattened = arr.flatMap(value => value);
console.log(flattened);

